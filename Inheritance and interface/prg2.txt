
interface Account {
    void deposit(double amount);

    void withdraw(double amount);

    double checkBalance();
}


abstract class BaseAccount implements Account {
    private String accountNumber;
    private String accountHolder;
    protected double balance;

    public BaseAccount(String accountNumber, String accountHolder, double initialBalance) {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = initialBalance;
    }

    @Override
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: $" + amount);
        } else {
            System.out.println("Invalid deposit amount");
        }
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn: $" + amount);
        } else {
            System.out.println("Invalid withdrawal amount or insufficient funds");
        }
    }

    @Override
    public double checkBalance() {
        System.out.println("Account Balance: $" + balance);
        return balance;
    }
}


class SavingsAccount extends BaseAccount {
    private double interestRate;

    public SavingsAccount(String accountNumber, String accountHolder, double initialBalance, double interestRate) {
        super(accountNumber, accountHolder, initialBalance);
        this.interestRate = interestRate;
    }

    public void addInterest() {
        double interestAmount = balance * interestRate / 100;
        balance += interestAmount;
        System.out.println("Interest added: $" + interestAmount);
    }
}


class CheckingAccount extends BaseAccount {
    private double overdraftLimit;

    public CheckingAccount(String accountNumber, String accountHolder, double initialBalance, double overdraftLimit) {
        super(accountNumber, accountHolder, initialBalance);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public void withdraw(double amount) {
        if (amount > 0 && (balance - amount) >= -overdraftLimit) {
            balance -= amount;
            System.out.println("Withdrawn: $" + amount);
        } else {
            System.out.println("Invalid withdrawal amount or exceeds overdraft limit");
        }
    }
}


class LoanAccount extends BaseAccount {
    private double interestRate;

    public LoanAccount(String accountNumber, String accountHolder, double initialBalance, double interestRate) {
        super(accountNumber, accountHolder, initialBalance);
        this.interestRate = interestRate;
    }

    @Override
    public void deposit(double amount) {
        if (amount > 0) {
            balance -= amount; 
            System.out.println("Loan repayment: $" + amount);
        } else {
            System.out.println("Invalid loan repayment amount");
        }
    }

    public void addInterest() {
        double interestAmount = balance * interestRate / 100;
        balance += interestAmount;
        System.out.println("Interest added: $" + interestAmount);
    }
}


public class BankingApplication {
    public static void main(String[] args) {
        
        SavingsAccount savingsAccount = new SavingsAccount("SA123456", "John Doe", 1000.0, 5.0);
        savingsAccount.deposit(500);
        savingsAccount.checkBalance();
        savingsAccount.addInterest();
        savingsAccount.checkBalance();

       
        CheckingAccount checkingAccount = new CheckingAccount("CA789012", "Jane Smith", 2000.0, 500.0);
        checkingAccount.withdraw(1000);
        checkingAccount.checkBalance();

       
        LoanAccount loanAccount = new LoanAccount("LA345678", "Bob Johnson", 5000.0, 10.0);
        loanAccount.deposit(1000);
        loanAccount.checkBalance();
        loanAccount.addInterest();
        loanAccount.checkBalance();
    }
}
