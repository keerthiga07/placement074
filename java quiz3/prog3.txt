import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

class TrieNode {
    boolean isEnd;
    TrieNode[] children = new TrieNode[26];
}

class Trie {
    TrieNode root = new TrieNode();

    void insert(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            int index = ch - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
        }
        node.isEnd = true;
    }

    boolean search(String word, int startIndex, int count) {
        TrieNode node = root;
        for (int i = startIndex; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (node.children[index] == null) {
                return false;
            }
            node = node.children[index];
            if (node.isEnd && search(word, i + 1, count + 1)) {
                return true;
            }
        }
        return count >= 2;
    }
}

public class ClubbedWords {

    public static List<String> findClubbedWords(String[] words) {
        List<String> result = new ArrayList<>();
        Trie trie = new Trie();

        Arrays.sort(words, (a, b) -> Integer.compare(b.length(), a.length()));

        for (String word : words) {
            if (trie.search(word, 0, 0)) {
                result.add(word);
            } else {
                trie.insert(word);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of words: ");
        int numWords = scanner.nextInt();

        String[] words = new String[numWords];
        System.out.println("Enter the words:");
        for (int i = 0; i < numWords; i++) {
            words[i] = scanner.next();
        }

        List<String> clubbedWords = findClubbedWords(words);

        System.out.println("Clubbed Words: " + clubbedWords);

 
    }
}